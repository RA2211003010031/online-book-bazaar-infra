// Jenkins Pipeline for Online Book Bazaar
// This file defines the CI/CD pipeline

pipeline {
    agent any
    
    environment {
        APP_NAME = 'online-book-bazaar'
        DOCKER_IMAGE = "${APP_NAME}:${BUILD_NUMBER}"
        ANSIBLE_INVENTORY = '/home/ubuntu/ansible-setup/inventory.ini'
        ANSIBLE_PLAYBOOK = '/home/ubuntu/ansible-setup/deploy-production.yml'
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                echo 'Checking out code from GitHub...'
                // Checkout code from your repository
                git branch: 'main', 
                    url: 'https://github.com/YOUR-USERNAME/YOUR-WEBSITE-REPO.git'
                
                echo 'Code checkout completed'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    // Copy Docker files from infrastructure repo
                    sh '''
                        cp /home/ubuntu/devops-config/docker/Dockerfile .
                        cp -r /home/ubuntu/devops-config/docker/* .
                    '''
                    
                    // Build Docker image
                    sh "docker build -t ${DOCKER_IMAGE} ."
                    sh "docker tag ${DOCKER_IMAGE} ${APP_NAME}:latest"
                }
                echo 'Docker image built successfully'
            }
        }
        
        stage('Test Application') {
            steps {
                echo 'Running application tests...'
                script {
                    // Run basic tests (adjust based on your testing framework)
                    sh '''
                        # Test if the image was built correctly
                        docker run --rm ${DOCKER_IMAGE} echo "Container test passed"
                        
                        # Add your specific tests here
                        # Example: docker run --rm ${DOCKER_IMAGE} npm test
                    '''
                }
                echo 'Tests completed'
            }
        }
        
        stage('Security Scan') {
            steps {
                echo 'Running security scans...'
                script {
                    // Basic security checks
                    sh '''
                        # Check for basic security issues
                        docker run --rm -v $(pwd):/app alpine:latest sh -c "
                            cd /app && 
                            find . -name '*.js' -o -name '*.json' | head -10
                        "
                    '''
                }
                echo 'Security scan completed'
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                echo 'Deploying to staging environment...'
                script {
                    // Deploy to one instance first (staging)
                    sh '''
                        ansible-playbook -i ${ANSIBLE_INVENTORY} ${ANSIBLE_PLAYBOOK} \
                        --limit instance1 \
                        --extra-vars "docker_image=${DOCKER_IMAGE}"
                    '''
                }
                echo 'Staging deployment completed'
            }
        }
        
        stage('Integration Tests') {
            steps {
                echo 'Running integration tests...'
                script {
                    // Test the deployed application
                    sh '''
                        # Wait for application to start
                        sleep 30
                        
                        # Test application endpoints
                        INSTANCE1_IP=$(ansible-inventory -i ${ANSIBLE_INVENTORY} --host instance1 | jq -r '.ansible_host')
                        curl -f http://${INSTANCE1_IP}:3000/ || exit 1
                        
                        echo "Integration tests passed"
                    '''
                }
                echo 'Integration tests completed'
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'  // Only deploy to production from main branch
            }
            steps {
                echo 'Deploying to production...'
                script {
                    // Deploy to all instances
                    sh '''
                        ansible-playbook -i ${ANSIBLE_INVENTORY} ${ANSIBLE_PLAYBOOK} \
                        --extra-vars "docker_image=${DOCKER_IMAGE}"
                    '''
                }
                echo 'Production deployment completed'
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'Performing health checks...'
                script {
                    // Check health of all deployed instances
                    sh '''
                        # Get all instance IPs and test them
                        ansible -i ${ANSIBLE_INVENTORY} web_servers -m shell \
                        -a "curl -f http://localhost:3000/ || exit 1"
                    '''
                }
                echo 'Health checks completed'
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline execution completed'
            // Clean up old Docker images
            sh '''
                # Keep only the last 3 images
                docker images ${APP_NAME} --format "table {{.Tag}}" | grep -v TAG | head -n -3 | xargs -r docker rmi ${APP_NAME}: || true
                
                # Clean up build artifacts
                docker system prune -f
            '''
        }
        
        success {
            echo '✅ Pipeline executed successfully!'
            // Send success notification (optional)
            sh '''
                echo "Deployment successful at $(date)" >> /var/lib/jenkins/deployment.log
            '''
        }
        
        failure {
            echo '❌ Pipeline failed!'
            // Send failure notification (optional)
            sh '''
                echo "Deployment failed at $(date)" >> /var/lib/jenkins/deployment.log
            '''
        }
        
        unstable {
            echo '⚠️ Pipeline completed with warnings'
        }
    }
}
